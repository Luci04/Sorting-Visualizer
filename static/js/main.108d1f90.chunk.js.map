{"version":3,"sources":["SortingAlgorithms/BubbleSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/MergeSort.js","Bar.js","Table.js","Chart.js","SortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["BubbleSort","array","animations","auxillaryArray","slice","iters","length","swapped","i","push","swap","bubbleSort","firstIndex","secondIndex","temp","Selection","N","minIndex","j","selectionSort","Merge","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","merge","Bar","className","style","height","this","props","left","Component","SortableElement","SortableContainer","map","e","index","key","Chart","onSortEnd","oldIndex","newIndex","state","sorting","setState","arrayMove","alert","Bubble_Sort","bind","Selction_Sort","Insertion_Sort","Merge_Sort","Speed","resetArray","handleIncrease","handleDecrease","sortedArr","arraysAreEqual","isColorChange","arrayBars","document","getElementsByClassName","comparision","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","insertionSort","Insertion","prev","arr","element","random","firstArray","secondArray","disabled","title","onClick","Table","axis","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.108d1f90.chunk.js","sourcesContent":["export function BubbleSort(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    let iters = N - 1;\r\n    while (iters > 0) {\r\n        let swapped = false;\r\n        let i\r\n        for (i = 0; i < iters; ++i) {\r\n            animations.push([\"comparision1\", i, i + 1]);\r\n            animations.push([\"comparision2\", i, i + 1]);\r\n            if (auxillaryArray[i] > auxillaryArray[i + 1]) {\r\n                swapped = true;\r\n                animations.push([i, auxillaryArray[i + 1]]);\r\n                animations.push([i + 1, auxillaryArray[i]]);\r\n                swap(auxillaryArray, i, i + 1);\r\n            }\r\n        }\r\n        if (swapped === false) {\r\n            break;\r\n        }\r\n        iters--;\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\n","export function Selection(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparision1\", j, minIndex]);\r\n            animations.push([\"comparision2\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([minIndex, auxillaryArray[i]]);\r\n        animations.push([i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n","export function Merge(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    if (startIndex === endIndex)\r\n        return;\r\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\r\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n    let sortArray = [];\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    while (i <= middleIndex && j <= endIndex) {\r\n        //Comparing value at ith and jth index so push them to change their color\r\n        animations.push([\"comparision1\", i, j]);\r\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\r\n        animations.push([\"comparision2\", i, j]);\r\n        if (auxillaryArray[i] <= auxillaryArray[j]) {\r\n            sortArray.push(auxillaryArray[i++]);\r\n        }\r\n        else {\r\n            sortArray.push(auxillaryArray[j++]);\r\n        }\r\n    }\r\n    while (i <= middleIndex) {\r\n        animations.push([\"comparision1\", i, i]);\r\n        animations.push([\"comparision2\", i, i]);\r\n        sortArray.push(auxillaryArray[i++]);\r\n    }\r\n    while (j <= endIndex) {\r\n        animations.push([\"comparision1\", j, j]);\r\n        animations.push([\"comparision2\", j, j]);\r\n        sortArray.push(auxillaryArray[j++]);\r\n    }\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n        animations.push([\"comparision1\", i, i - startIndex]);\r\n        animations.push([i, sortArray[i - startIndex]]);\r\n        animations.push([\"comparision2\", i, i - startIndex]);\r\n        auxillaryArray[i] = sortArray[i - startIndex];\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport \"./Bar.css\";\r\nimport { SortableElement } from 'react-sortable-hoc';\r\n\r\nclass Bar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Bar\" style={{ height: `${this.props.height}px`, left: `${this.props.left}px` }}></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SortableElement(Bar);\r\n","import React from 'react'\r\nimport Bar from './Bar';\r\nimport { SortableContainer } from 'react-sortable-hoc';\r\n\r\n\r\nfunction DraggbleBars({ array }) {\r\n\r\n    return (\r\n        <div>\r\n            {array.map((e, index) => <Bar height={e} key={index} index={index} left={index * 20} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortableContainer(DraggbleBars);\r\n\r\n","import React, { Component } from 'react';\r\nimport { BubbleSort } from './SortingAlgorithms/BubbleSort';\r\nimport { Selection } from './SortingAlgorithms/SelectionSort';\r\nimport { Insertion } from './SortingAlgorithms/InsertionSort';\r\nimport { Merge } from './SortingAlgorithms/MergeSort';\r\nimport Table from './Table';\r\nimport arrayMove from 'array-move';\r\nimport \"./Chart.css\";\r\n\r\nconst PRIMARY_COLOR = 'blue';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nclass Chart extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.Bubble_Sort = this.Bubble_Sort.bind(this);\r\n        this.Selction_Sort = this.Selction_Sort.bind(this);\r\n        this.Insertion_Sort = this.Insertion_Sort.bind(this);\r\n        this.Merge_Sort = this.Merge_Sort.bind(this);\r\n        this.state = { array: [], length: 50, Speed: 50, sorting: false };\r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.handleIncrease = this.handleIncrease.bind(this);\r\n        this.handleDecrease = this.handleDecrease.bind(this);\r\n    }\r\n\r\n    onSortEnd = ({ oldIndex, newIndex }) => {\r\n        if (this.state.sorting === false) {\r\n            this.setState(({ array }) => ({\r\n                array: arrayMove(array, oldIndex, newIndex),\r\n            }));\r\n        } else {\r\n            alert(\"Sorting Process is Running!!!\")\r\n        }\r\n\r\n    };\r\n\r\n    Bubble_Sort() {\r\n\r\n        this.setState({ sorting: true });\r\n\r\n        const [animations, sortedArr] = BubbleSort(this.state.array);\r\n\r\n        if (this.arraysAreEqual(sortedArr, this.state.array)) {\r\n            alert(\"Already Sorted\");\r\n            this.setState({ sorting: false });\r\n        } else {\r\n            let i;\r\n            for (i = 0; i < animations.length; i++) {\r\n                const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\r\n                const arrayBars = document.getElementsByClassName('Bar');\r\n                if (isColorChange === true) {\r\n                    const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n\r\n                    const color = (comparision === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = color;\r\n                        barTwoStyle.backgroundColor = color;\r\n                    }, i * this.state.Speed);\r\n                }\r\n                else {\r\n                    const [barIndex, newHeight] = animations[i];\r\n                    if (barIndex === -1) {\r\n                        continue;\r\n                    }\r\n                    const barStyle = arrayBars[barIndex].style;\r\n                    setTimeout(() => {\r\n                        barStyle.height = `${newHeight}px`;\r\n                    }, i * this.state.Speed);\r\n                }\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ sorting: false });\r\n                this.setState({ array: sortedArr });\r\n            }, i * this.state.Speed);\r\n\r\n\r\n        }\r\n    }\r\n\r\n    Insertion_Sort() {\r\n\r\n        this.setState({ sorting: true });\r\n\r\n        const [animations, sortedArr] = Insertion(this.state.array);\r\n\r\n        if (this.arraysAreEqual(sortedArr, this.state.array)) {\r\n            alert(\"Already Sorted\");\r\n            this.setState({ sorting: false });\r\n        } else {\r\n\r\n            let i;\r\n            for (i = 0; i < animations.length; i++) {\r\n                const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\r\n                const arrayBars = document.getElementsByClassName('Bar');\r\n                if (isColorChange === true) {\r\n                    const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                    const color = (comparision === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = color;\r\n                        barTwoStyle.backgroundColor = color;\r\n                    }, i * this.state.Speed);\r\n                }\r\n                else {\r\n                    const [barIndex, newHeight] = animations[i];\r\n                    if (barIndex === -1) {\r\n                        continue;\r\n                    }\r\n                    const barStyle = arrayBars[barIndex].style;\r\n                    setTimeout(() => {\r\n                        barStyle.height = `${newHeight}px`;\r\n                    }, i * this.state.Speed);\r\n                }\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ sorting: false });\r\n                this.setState({ array: sortedArr });\r\n            }, i * this.state.Speed);\r\n\r\n\r\n        }\r\n    }\r\n\r\n    Merge_Sort() {\r\n\r\n        this.setState({ sorting: true });\r\n\r\n        const [animations, sortedArr] = Merge(this.state.array);\r\n\r\n        if (this.arraysAreEqual(sortedArr, this.state.array)) {\r\n            alert(\"Already Sorted\");\r\n            this.setState({ sorting: false });\r\n        } else {\r\n            let i;\r\n            for (i = 0; i < animations.length; i++) {\r\n                const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\r\n                const arrayBars = document.getElementsByClassName('Bar');\r\n                if (isColorChange === true) {\r\n                    const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                    const color = (comparision === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = color;\r\n                        barTwoStyle.backgroundColor = color;\r\n                    }, i * this.state.Speed);\r\n                }\r\n                else {\r\n                    const [barIndex, newHeight] = animations[i];\r\n                    if (barIndex === -1) {\r\n                        continue;\r\n                    }\r\n                    const barStyle = arrayBars[barIndex].style;\r\n                    setTimeout(() => {\r\n                        barStyle.height = `${newHeight}px`;\r\n                    }, i * this.state.Speed);\r\n                }\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ sorting: false });\r\n                this.setState({ array: sortedArr });\r\n            }, i * this.state.Speed);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    Selction_Sort() {\r\n\r\n        this.setState({ sorting: true });\r\n\r\n        const [animations, sortedArr] = Selection(this.state.array);\r\n\r\n        if (this.arraysAreEqual(sortedArr, this.state.array)) {\r\n            alert(\"Already Sorted\");\r\n            this.setState({ sorting: false });\r\n        } else {\r\n            let i;\r\n            for (i = 0; i < animations.length; i++) {\r\n                const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\r\n                const arrayBars = document.getElementsByClassName('Bar');\r\n                if (isColorChange === true) {\r\n                    const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                    const color = (comparision === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = color;\r\n                        barTwoStyle.backgroundColor = color;\r\n                    }, i * this.state.Speed);\r\n                }\r\n                else {\r\n                    const [barIndex, newHeight] = animations[i];\r\n                    if (barIndex === -1) {\r\n                        continue;\r\n                    }\r\n                    const barStyle = arrayBars[barIndex].style;\r\n                    setTimeout(() => {\r\n                        barStyle.height = `${newHeight}px`;\r\n                    }, i * this.state.Speed);\r\n                }\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ sorting: false });\r\n                this.setState({ array: sortedArr });\r\n            }, i * this.state.Speed);\r\n\r\n        }\r\n    }\r\n\r\n    handleIncrease() {\r\n\r\n        let x = this.state.Speed;\r\n        if (x > 1) {\r\n            this.setState(prev => ({\r\n                Speed: prev.Speed - 30\r\n            }))\r\n        } else {\r\n            alert(\"Cannot get Faster than this\")\r\n        }\r\n\r\n    }\r\n\r\n    handleDecrease() {\r\n        let x = this.state.Speed;\r\n        if (x < 110) {\r\n            this.setState(prev => ({\r\n                Speed: prev.Speed + 30\r\n            }))\r\n        } else {\r\n            alert(\"Sry Slower than this is not possible\");\r\n        }\r\n    }\r\n\r\n    resetArray() {\r\n        const arr = [];\r\n        for (let index = 0; index < this.state.length; index++) {\r\n            let element = Math.floor(Math.random() * 500) + 100;\r\n            arr[index] = element;\r\n        }\r\n        this.setState({ array: arr });\r\n    }\r\n\r\n    arraysAreEqual(firstArray, secondArray) {\r\n        if (firstArray.length !== secondArray.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < firstArray.length; i++) {\r\n            if (firstArray[i] !== secondArray[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"main\" >\r\n                <div className=\"buttons\" >\r\n                    <button disabled={this.state.sorting} title=\"Generates a new random array\" className=\"button bouncy\" onClick={this.resetArray}>\r\n                        Reset\r\n                    </button>\r\n                    <button disabled={this.state.sorting} className=\"button bouncy\" style={{ \"animation-delay\": \"0.07s\" }} onClick={this.Bubble_Sort}>Bubble-Sort</button>\r\n                    <button disabled={this.state.sorting} className=\"button bouncy\" style={{ \"animation-delay\": \"0.14s\" }} onClick={this.Merge_Sort}>Merge-Sort</button>\r\n                    <button disabled={this.state.sorting} className=\"button bouncy\" style={{ \"animation-delay\": \"0.21s\" }} onClick={this.Insertion_Sort}>Insertion Sort</button>\r\n                    <button disabled={this.state.sorting} className=\"button bouncy\" style={{ \"animation-delay\": \"0.28s\" }} onClick={this.Selction_Sort}>Selection Sort</button>\r\n                    <button disabled={this.state.sorting} className=\"button bouncy\" style={{ \"animation-delay\": \"0.35s\" }} onClick={this.handleIncrease}>Speed +</button>\r\n                    <button disabled={this.state.sorting} className=\"button bouncy\" style={{ \"animation-delay\": \"0.42s\" }} onClick={this.handleDecrease}>Speed -</button>\r\n                </div>\r\n                <div className=\"Chart\">\r\n                    <Table\r\n                        axis=\"x\"\r\n                        array={this.state.array}\r\n                        onSortEnd={this.onSortEnd}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart\r\n\r\n\r\n\r\n// swap(arr, first, second) {\r\n//     var temp = arr[first];\r\n//     arr[first] = arr[second];\r\n//     arr[second] = temp;\r\n//     this.setState({ array: arr });\r\n// }\r\n\r\n// resetArray() {\r\n//     const arr = [];\r\n//     for (let index = 0; index < this.state.length; index++) {\r\n//         let element = Math.floor(Math.random() * 500) + 20;\r\n//         arr[index] = element;\r\n//     }\r\n\r\n//     this.setState({ array: arr });\r\n// }\r\n\r\n// sleep = (milliseconds) => {\r\n//     return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n// }\r\n\r\n// async Sort() {\r\n//     var len = this.state.length;\r\n//     var i, j, stop;\r\n//     let arr = this.state.array;\r\n//     for (i = 0; i < len; i++) {\r\n//         for (j = 0, stop = len - i; j < stop; j++) {\r\n//             if (arr[j] > arr[j + 1]) {\r\n//                 await this.sleep(100);\r\n//                 this.swap(arr, j, j + 1);\r\n//             }\r\n\r\n//         }\r\n\r\n//     }\r\n\r\n    // arr = this.mergesort(arr);\r\n    // this.setState({ array: arr });\r\n\r\n// }\r\n\r\n// merge(leftArr, rightArr) {\r\n//     var sortedArr = [];\r\n//     while (leftArr.length && rightArr.length) {\r\n//         if (leftArr[0] <= rightArr[0]) {\r\n//             sortedArr.push(leftArr[0]);\r\n//             leftArr = leftArr.slice(1)\r\n//         }\r\n//         else {\r\n//             sortedArr.push(rightArr[0]);\r\n//             rightArr = rightArr.slice(1)\r\n//         }\r\n//     } while (leftArr.length) sortedArr.push(leftArr.shift()); while (rightArr.length) sortedArr.push(rightArr.shift()); return sortedArr;\r\n// }\r\n\r\n// mergesort(arr) {\r\n//     if (arr.length < 2) { return arr; } else {\r\n//         var midpoint = parseInt(arr.length / 2);\r\n//         var leftArr = arr.slice(0, midpoint);\r\n//         var rightArr = arr.slice(midpoint, arr.length);\r\n//         return this.merge(this.mergesort(leftArr), this.mergesort(rightArr));\r\n//     }\r\n// }\r\n","export function Insertion(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while (j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j--;\r\n            if (j >= 0) {\r\n                animations.push(['comparision1', j, i]);\r\n                animations.push(['comparision2', j, i]);\r\n            }\r\n\r\n            animations.push([j + 1, key]);\r\n            auxillaryArray[j + 1] = key;\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport Chart from './Chart';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Chart />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}