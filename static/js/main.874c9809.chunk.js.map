{"version":3,"sources":["Bar.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/SelectionSort.js","Chart.js","SortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["Bar","className","style","height","this","props","left","Component","BubbleSort","array","animations","auxillaryArray","slice","iters","length","swapped","i","push","swap","bubbleSort","firstIndex","secondIndex","temp","Selection","N","minIndex","j","selection","Chart","Bubble_Sort","bind","Selction_Sort","Insertion_Sort","state","Speed","resetArray","handleIncrease","handleDecrease","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","key","insertionSort","Insertion","setState","prev","alert","arr","index","element","Math","floor","random","Object","map","e","title","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.874c9809.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./Bar.css\";\n\nclass Bar extends Component {\n\n    render() {\n        return (\n            <div className=\"Bar\" style={{ height: `${this.props.height}px`, left: `${this.props.left}px` }}></div>\n        )\n    }\n}\n\nexport default Bar\n","export function BubbleSort(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    let iters = N - 1;\n    while (iters > 0) {\n        let swapped = false;\n        let i\n        for (i = 0; i < iters; ++i) {\n            animations.push([\"comparision1\", i, i + 1]);\n            animations.push([\"comparision2\", i, i + 1]);\n            if (auxillaryArray[i] > auxillaryArray[i + 1]) {\n                swapped = true;\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n                swap(auxillaryArray, i, i + 1);\n            }\n        }\n        if (swapped === false) {\n            break;\n        }\n        iters--;\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n","export function Selection(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    selection(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selection(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - i; i++) {\n        let minIndex = i;\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex])\n                minIndex = j;\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n","import React, { Component } from 'react';\nimport Bar from './Bar';\nimport \"./Chart.css\";\nimport { BubbleSort } from './SortingAlgorithms/BubbleSort';\nimport { Selection } from './SortingAlgorithms/SelectionSort';\nimport { Insertion } from './SortingAlgorithms/InsertionSort';\n\nconst PRIMARY_COLOR = 'blue';\nconst SECONDARY_COLOR = 'red';\n\nclass Chart extends Component {\n    constructor(props) {\n        super(props);\n        this.Bubble_Sort = this.Bubble_Sort.bind(this);\n        this.Selction_Sort = this.Selction_Sort.bind(this);\n        this.Insertion_Sort = this.Selction_Sort.bind(this);\n        this.state = { array: [], length: 66, Speed: 50 };\n        this.resetArray = this.resetArray.bind(this);\n        this.handleIncrease = this.handleIncrease.bind(this);\n        this.handleDecrease = this.handleDecrease.bind(this);\n    }\n\n    Bubble_Sort() {\n        const [animations] = BubbleSort(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n            const arrayBars = document.getElementsByClassName('Bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * this.state.Speed);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * this.state.Speed);\n            }\n        }\n    }\n\n    Insertion_Sort() {\n        const [animations] = Insertion(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n            const arrayBars = document.getElementsByClassName('Bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * this.state.Speed);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * this.state.Speed);\n            }\n        }\n    }\n\n    Selction_Sort() {\n        const [animations] = Selection(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n            const arrayBars = document.getElementsByClassName('Bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * this.state.Speed);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * this.state.Speed);\n            }\n        }\n    }\n\n    handleIncrease() {\n\n        let x = this.state.Speed;\n        if (x > 1) {\n            this.setState(prev => ({\n                Speed: prev.Speed - 20\n            }))\n        } else {\n            alert(\"Cannot get Faster than this\")\n        }\n\n    }\n\n    handleDecrease() {\n        let x = this.state.Speed;\n        if (x < 110) {\n            this.setState(prev => ({\n                Speed: prev.Speed + 20\n            }))\n        } else {\n            alert(\"Sry Slower than this is not possible\");\n        }\n    }\n\n    resetArray() {\n        const arr = [];\n        for (let index = 0; index < this.state.length; index++) {\n            let element = Math.floor(Math.random() * 800) + 100;\n            arr[index] = element;\n        }\n        this.setState({ array: arr });\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    render() {\n        let Object = this.state.array.map((e, index) => <div className=\"array-bar\"><Bar height={e} key={index} left={index * 20} /></div>)\n\n\n        return (\n            <div className=\"main\">\n\n                <div className=\"buttons\" >\n                    <button title=\"Generates a new random array\" className=\"button\" onClick={this.resetArray}>\n                        Reset\n                    </button>\n                    <button className=\"button\" onClick={this.Bubble_Sort}>Bubble-Sort</button>\n                    <button className=\"button\" onClick={this.Insertion_Sort}>Insertion Sort</button>\n                    <button className=\"button\" onClick={this.Selction_Sort}>Selection Sort</button>\n                    <button className=\"button\" onClick={this.handleIncrease}>Speed +</button>\n                    <button className=\"button\" onClick={this.handleDecrease}>Speed -</button>\n                </div>\n                <div className=\"Chart\">\n                    {Object}\n                </div >\n            </div>\n\n        )\n    }\n}\n\nexport default Chart\n\n\n\n// swap(arr, first, second) {\n//     var temp = arr[first];\n//     arr[first] = arr[second];\n//     arr[second] = temp;\n//     this.setState({ array: arr });\n// }\n\n// resetArray() {\n//     const arr = [];\n//     for (let index = 0; index < this.state.length; index++) {\n//         let element = Math.floor(Math.random() * 500) + 20;\n//         arr[index] = element;\n//     }\n\n//     this.setState({ array: arr });\n// }\n\n// sleep = (milliseconds) => {\n//     return new Promise(resolve => setTimeout(resolve, milliseconds))\n// }\n\n// async Sort() {\n//     var len = this.state.length;\n//     var i, j, stop;\n//     let arr = this.state.array;\n//     for (i = 0; i < len; i++) {\n//         for (j = 0, stop = len - i; j < stop; j++) {\n//             if (arr[j] > arr[j + 1]) {\n//                 await this.sleep(100);\n//                 this.swap(arr, j, j + 1);\n//             }\n\n//         }\n\n//     }\n\n    // arr = this.mergesort(arr);\n    // this.setState({ array: arr });\n\n// }\n\n// merge(leftArr, rightArr) {\n//     var sortedArr = [];\n//     while (leftArr.length && rightArr.length) {\n//         if (leftArr[0] <= rightArr[0]) {\n//             sortedArr.push(leftArr[0]);\n//             leftArr = leftArr.slice(1)\n//         }\n//         else {\n//             sortedArr.push(rightArr[0]);\n//             rightArr = rightArr.slice(1)\n//         }\n//     } while (leftArr.length) sortedArr.push(leftArr.shift()); while (rightArr.length) sortedArr.push(rightArr.shift()); return sortedArr;\n// }\n\n// mergesort(arr) {\n//     if (arr.length < 2) { return arr; } else {\n//         var midpoint = parseInt(arr.length / 2);\n//         var leftArr = arr.slice(0, midpoint);\n//         var rightArr = arr.slice(midpoint, arr.length);\n//         return this.merge(this.mergesort(leftArr), this.mergesort(rightArr));\n//     }\n// }\n","export function Insertion(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while (j >= 0 && auxillaryArray[j] > key) {\n            animations.push(['overwrite', j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j--;\n            if (j >= 0) {\n                animations.push(['comparision1', j, i]);\n                animations.push(['comparision2', j, i]);\n            }\n\n            animations.push(['overwrite', j + 1, key]);\n            auxillaryArray[j + 1] = key;\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n","import React from 'react';\nimport Chart from './Chart';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}